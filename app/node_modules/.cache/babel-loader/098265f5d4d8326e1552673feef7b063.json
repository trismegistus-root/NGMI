{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\n\nvar secp256k1 = require('./secp256k1v3-adapter');\n\nvar BN = require(\"bn.js\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar hash_1 = require(\"./hash\");\n/**\r\n * Returns the ECDSA signature of a message hash.\r\n */\n\n\nexports.ecsign = function (msgHash, privateKey, chainId) {\n  var sig = secp256k1.sign(msgHash, privateKey);\n  var recovery = sig.recovery;\n  var ret = {\n    r: sig.signature.slice(0, 32),\n    s: sig.signature.slice(32, 64),\n    v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27\n  };\n  return ret;\n};\n/**\r\n * ECDSA public key recovery from signature.\r\n * @returns Recovered public key\r\n */\n\n\nexports.ecrecover = function (msgHash, v, r, s, chainId) {\n  var signature = Buffer.concat([bytes_1.setLength(r, 32), bytes_1.setLength(s, 32)], 64);\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n\n  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);\n  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);\n};\n/**\r\n * Convert signature parameters into the format of `eth_sign` RPC method.\r\n * @returns Signature\r\n */\n\n\nexports.toRpcSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  } // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n\n\n  return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));\n};\n/**\r\n * Convert signature format of the `eth_sign` RPC method to signature parameters\r\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\r\n */\n\n\nexports.fromRpcSig = function (sig) {\n  var buf = bytes_1.toBuffer(sig); // NOTE: with potential introduction of chainId this might need to be updated\n\n  if (buf.length !== 65) {\n    throw new Error('Invalid signature length');\n  }\n\n  var v = buf[64]; // support both versions of `eth_sign` responses\n\n  if (v < 27) {\n    v += 27;\n  }\n\n  return {\n    v: v,\n    r: buf.slice(0, 32),\n    s: buf.slice(32, 64)\n  };\n};\n/**\r\n * Validate a ECDSA signature.\r\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\r\n */\n\n\nexports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n  if (homesteadOrLater === void 0) {\n    homesteadOrLater = true;\n  }\n\n  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false;\n  }\n\n  var rBN = new BN(r);\n  var sBN = new BN(s);\n\n  if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n    return false;\n  }\n\n  if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n    return false;\n  }\n\n  return true;\n};\n/**\r\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\r\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\r\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\r\n * used to produce the signature.\r\n */\n\n\nexports.hashPersonalMessage = function (message) {\n  var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\" + message.length.toString(), 'utf-8');\n  return hash_1.keccak(Buffer.concat([prefix, message]));\n};\n\nfunction calculateSigRecovery(v, chainId) {\n  return chainId ? v - (2 * chainId + 35) : v - 27;\n}\n\nfunction isValidSigRecovery(recovery) {\n  return recovery === 0 || recovery === 1;\n}","map":{"version":3,"sources":["../src/signature.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\r\nvar secp256k1 = require('./secp256k1v3-adapter');\r\nvar BN = require(\"bn.js\");\r\nvar bytes_1 = require(\"./bytes\");\r\nvar hash_1 = require(\"./hash\");\r\n/**\r\n * Returns the ECDSA signature of a message hash.\r\n */\r\nexports.ecsign = function (msgHash, privateKey, chainId) {\r\n    var sig = secp256k1.sign(msgHash, privateKey);\r\n    var recovery = sig.recovery;\r\n    var ret = {\r\n        r: sig.signature.slice(0, 32),\r\n        s: sig.signature.slice(32, 64),\r\n        v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27,\r\n    };\r\n    return ret;\r\n};\r\n/**\r\n * ECDSA public key recovery from signature.\r\n * @returns Recovered public key\r\n */\r\nexports.ecrecover = function (msgHash, v, r, s, chainId) {\r\n    var signature = Buffer.concat([bytes_1.setLength(r, 32), bytes_1.setLength(s, 32)], 64);\r\n    var recovery = calculateSigRecovery(v, chainId);\r\n    if (!isValidSigRecovery(recovery)) {\r\n        throw new Error('Invalid signature v value');\r\n    }\r\n    var senderPubKey = secp256k1.recover(msgHash, signature, recovery);\r\n    return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);\r\n};\r\n/**\r\n * Convert signature parameters into the format of `eth_sign` RPC method.\r\n * @returns Signature\r\n */\r\nexports.toRpcSig = function (v, r, s, chainId) {\r\n    var recovery = calculateSigRecovery(v, chainId);\r\n    if (!isValidSigRecovery(recovery)) {\r\n        throw new Error('Invalid signature v value');\r\n    }\r\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\r\n    return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));\r\n};\r\n/**\r\n * Convert signature format of the `eth_sign` RPC method to signature parameters\r\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\r\n */\r\nexports.fromRpcSig = function (sig) {\r\n    var buf = bytes_1.toBuffer(sig);\r\n    // NOTE: with potential introduction of chainId this might need to be updated\r\n    if (buf.length !== 65) {\r\n        throw new Error('Invalid signature length');\r\n    }\r\n    var v = buf[64];\r\n    // support both versions of `eth_sign` responses\r\n    if (v < 27) {\r\n        v += 27;\r\n    }\r\n    return {\r\n        v: v,\r\n        r: buf.slice(0, 32),\r\n        s: buf.slice(32, 64),\r\n    };\r\n};\r\n/**\r\n * Validate a ECDSA signature.\r\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\r\n */\r\nexports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\r\n    if (homesteadOrLater === void 0) { homesteadOrLater = true; }\r\n    var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\r\n    var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\r\n    if (r.length !== 32 || s.length !== 32) {\r\n        return false;\r\n    }\r\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\r\n        return false;\r\n    }\r\n    var rBN = new BN(r);\r\n    var sBN = new BN(s);\r\n    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\r\n        return false;\r\n    }\r\n    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\n/**\r\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\r\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\r\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\r\n * used to produce the signature.\r\n */\r\nexports.hashPersonalMessage = function (message) {\r\n    var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\" + message.length.toString(), 'utf-8');\r\n    return hash_1.keccak(Buffer.concat([prefix, message]));\r\n};\r\nfunction calculateSigRecovery(v, chainId) {\r\n    return chainId ? v - (2 * chainId + 35) : v - 27;\r\n}\r\nfunction isValidSigRecovery(recovery) {\r\n    return recovery === 0 || recovery === 1;\r\n}\r\n//# sourceMappingURL=signature.js.map"]},"metadata":{},"sourceType":"script"}