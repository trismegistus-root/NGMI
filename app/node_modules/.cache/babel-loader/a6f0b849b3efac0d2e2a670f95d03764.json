{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\ngmi\\\\app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport ngmi from './contracts/ngmi.json';\nimport \"./App.css\";\nimport WhitePaper from \"./components/WhitePaper/WhitePaper.js\";\nimport Web3 from 'web3';\nlet web3;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      try {\n        web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\"); //set this.state({web3})\n\n        const accounts = await web3.eth.getAccounts(); //set this.state({accounts})\n        // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        let deployedNetwork = ngmi.networks[networkId];\n        const ngmiInstance = new web3.eth.Contract(ngmi.abi, deployedNetwork && deployedNetwork.address); //set this.state({contract})\n\n        const supply = await ngmiInstance.methods[\"totalSupply\"]().call();\n        this.setState({\n          web3,\n          accounts,\n          contract: ngmiInstance,\n          totalSupply: supply\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    this.mintToken = async address => {\n      const {\n        accounts,\n        contract\n      } = this.state;\n      await contract.methods[\"getToken\"]().send({\n        from: accounts[0]\n      });\n      const ngmiResponse = await contract.methods[\"getToken\"]().call();\n      const supply = await contract.methods[\"totalSupply\"]().call();\n      this.setState({\n        storageValue: ngmiResponse,\n        totalSupply: supply\n      });\n    };\n\n    this.state = {\n      web3: null,\n      accounts: null,\n      contract: null,\n      totalSupply: null\n    };\n    this.mintToken = this.mintToken.bind(this);\n    this.addressReceipt = this.addressReceipt.bind(this);\n  }\n\n  addressReceipt(address) {\n    this.mintToken(this.state.faucetAddress);\n  }\n\n  render() {\n    if (!this.state.web3) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Connect a wallet...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 34\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(WhitePaper, {\n        mint: this.mintToken,\n        address: this.addressReceipt,\n        accounts: this.state.accounts,\n        supply: this.state.totalSupply\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/ngmi/app/src/App.js"],"names":["React","ngmi","WhitePaper","Web3","web3","App","Component","constructor","props","componentDidMount","givenProvider","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","ngmiInstance","Contract","abi","address","supply","methods","call","setState","contract","totalSupply","runExample","error","alert","console","mintToken","state","send","from","ngmiResponse","storageValue","bind","addressReceipt","faucetAddress","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ngmi from './contracts/ngmi.json';\r\nimport \"./App.css\";\r\nimport WhitePaper from \"./components/WhitePaper/WhitePaper.js\";\r\nimport Web3 from 'web3';\r\n\r\n\r\nlet web3;\r\n\r\n\r\nclass App extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = { web3: null, accounts: null, contract: null, totalSupply: null};\r\n\t\tthis.mintToken = this.mintToken.bind(this);\r\n\t\tthis.addressReceipt = this.addressReceipt.bind(this);\r\n\t}\r\n\r\n\tcomponentDidMount = async () => {\r\n\t\t\r\n\t\ttry {\r\n\t\t  web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");  //set this.state({web3})\r\n\t\t  const accounts = await web3.eth.getAccounts();\t\t\t\t //set this.state({accounts})\r\n\r\n\t\t  // Get the contract instance.\r\n\t\t  const networkId = await web3.eth.net.getId();\t\t\t\t\t\r\n\t\t  let deployedNetwork = ngmi.networks[networkId];\r\n\t\t  const ngmiInstance = new web3.eth.Contract(\r\n\t\t\tngmi.abi,\r\n\t\t\tdeployedNetwork && deployedNetwork.address,\r\n\t\t  );\t\t\t\t\t\t\t\t\t\t\t\t\t\t     //set this.state({contract})\r\n\t\t  const supply = await ngmiInstance.methods.[\"totalSupply\"]().call();\r\n\t\t  this.setState({ web3, accounts, contract: ngmiInstance, totalSupply: supply}, this.runExample);\r\n\t\t} catch (error) {\r\n\t\t  // Catch any errors for any of the above operations.\r\n\t\t  alert(\r\n\t\t\t`Failed to load web3, accounts, or contract. Check console for details.`,\r\n\t\t  );\r\n\t\t  console.error(error);\r\n\t\t}\r\n\t  };\r\n\r\n\t\t mintToken = async (address) => {\r\n\t\t\tconst { accounts, contract } = this.state;\r\n\r\n\t\t\tawait contract.methods.[\"getToken\"]().send({ from: accounts[0]});\r\n\t\t\tconst ngmiResponse = await contract.methods.[\"getToken\"]().call();\r\n\t\t\tconst supply = await contract.methods.[\"totalSupply\"]().call();\r\n\t\t\tthis.setState({ storageValue: ngmiResponse, totalSupply: supply});\r\n\t\t\t};\r\n\r\n\t\t addressReceipt(address){\r\n\t\t\tthis.mintToken(this.state.faucetAddress);\r\n\t\t}\r\n\r\n\trender(){\r\n\t\t  if (!this.state.web3) return <div>Connect a wallet...</div>;\r\n          return (\r\n           <div>\r\n\t\t\t\t<WhitePaper \r\n\t\t\t\tmint = {this.mintToken} \r\n\t\t\t\taddress = {this.addressReceipt} \r\n\t\t\t\taccounts = {this.state.accounts} \r\n\t\t\t\tsupply = {this.state.totalSupply}\r\n\t\t\t\t/>\r\n\t\t   </div>\r\n          )\r\n       }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}