{"ast":null,"code":"/*\r\n    This file is part of web3.js.\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n\n/**\r\n * @file ENS.js\r\n *\r\n * @author Samuel Furter <samuel@ethereum.org>\r\n * @date 2018\r\n */\n\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/ngmi/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/ngmi/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _ = require('underscore');\n\nvar config = require('./config');\n\nvar formatters = require('web3-core-helpers').formatters;\n\nvar utils = require('web3-utils');\n\nvar Registry = require('./contracts/Registry');\n\nvar ResolverMethodHandler = require('./lib/ResolverMethodHandler');\n\nvar contenthash = require('./lib/contentHash');\n/**\r\n * Constructs a new instance of ENS\r\n *\r\n * @param {Eth} eth\r\n *\r\n * @constructor\r\n */\n\n\nfunction ENS(eth) {\n  this.eth = eth;\n  var registryAddress = null;\n  this._detectedAddress = null;\n  this._lastSyncCheck = null;\n  Object.defineProperty(this, 'registry', {\n    get: function get() {\n      return new Registry(this);\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'resolverMethodHandler', {\n    get: function get() {\n      return new ResolverMethodHandler(this.registry);\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'registryAddress', {\n    get: function get() {\n      return registryAddress;\n    },\n    set: function set(value) {\n      if (value === null) {\n        registryAddress = value;\n        return;\n      }\n\n      registryAddress = formatters.inputAddressFormatter(value);\n    },\n    enumerable: true\n  });\n}\n/**\r\n * Returns true if the given interfaceId is supported and otherwise false.\r\n *\r\n * @method supportsInterface\r\n *\r\n * @param {string} name\r\n * @param {string} interfaceId\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<boolean>}\r\n */\n\n\nENS.prototype.supportsInterface = function (name, interfaceId, callback) {\n  return this.getResolver(name).then(function (resolver) {\n    if (!utils.isHexStrict(interfaceId)) {\n      interfaceId = utils.sha3(interfaceId).slice(0, 10);\n    }\n\n    return resolver.methods.supportsInterface(interfaceId).call(callback);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n\n    throw error;\n  });\n};\n/**\r\n * Returns the Resolver by the given address\r\n *\r\n * @deprecated Please use the \"getResolver\" method instead of \"resolver\"\r\n *\r\n * @method resolver\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<Contract>}\r\n */\n\n\nENS.prototype.resolver = function (name, callback) {\n  return this.registry.resolver(name, callback);\n};\n/**\r\n * Returns the Resolver by the given address\r\n *\r\n * @method getResolver\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<Contract>}\r\n */\n\n\nENS.prototype.getResolver = function (name, callback) {\n  return this.registry.getResolver(name, callback);\n};\n/**\r\n * Does set the resolver of the given name\r\n *\r\n * @method setResolver\r\n *\r\n * @param {string} name\r\n * @param {string} address\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nENS.prototype.setResolver = function (name, address, txConfig, callback) {\n  return this.registry.setResolver(name, address, txConfig, callback);\n};\n/**\r\n * Sets the owner, resolver, and TTL for an ENS record in a single operation.\r\n *\r\n * @method setRecord\r\n *\r\n * @param {string} name\r\n * @param {string} owner\r\n * @param {string} resolver\r\n * @param {string | number} ttl\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nENS.prototype.setRecord = function (name, owner, resolver, ttl, txConfig, callback) {\n  return this.registry.setRecord(name, owner, resolver, ttl, txConfig, callback);\n};\n/**\r\n * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.\r\n *\r\n * @method setSubnodeRecord\r\n *\r\n * @param {string} name\r\n * @param {string} label\r\n * @param {string} owner\r\n * @param {string} resolver\r\n * @param {string | number} ttl\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nENS.prototype.setSubnodeRecord = function (name, label, owner, resolver, ttl, txConfig, callback) {\n  return this.registry.setSubnodeRecord(name, label, owner, resolver, ttl, txConfig, callback);\n};\n/**\r\n * Sets or clears an approval by the given operator.\r\n *\r\n * @method setApprovalForAll\r\n *\r\n * @param {string} operator\r\n * @param {boolean} approved\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nENS.prototype.setApprovalForAll = function (operator, approved, txConfig, callback) {\n  return this.registry.setApprovalForAll(operator, approved, txConfig, callback);\n};\n/**\r\n * Returns true if the operator is approved\r\n *\r\n * @method isApprovedForAll\r\n *\r\n * @param {string} owner\r\n * @param {string} operator\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<boolean>}\r\n */\n\n\nENS.prototype.isApprovedForAll = function (owner, operator, callback) {\n  return this.registry.isApprovedForAll(owner, operator, callback);\n};\n/**\r\n * Returns true if the record exists\r\n *\r\n * @method recordExists\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<boolean>}\r\n */\n\n\nENS.prototype.recordExists = function (name, callback) {\n  return this.registry.recordExists(name, callback);\n};\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method setSubnodeOwner\r\n *\r\n * @param {string} name\r\n * @param {string} label\r\n * @param {string} address\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nENS.prototype.setSubnodeOwner = function (name, label, address, txConfig, callback) {\n  return this.registry.setSubnodeOwner(name, label, address, txConfig, callback);\n};\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method getTTL\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nENS.prototype.getTTL = function (name, callback) {\n  return this.registry.getTTL(name, callback);\n};\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method setTTL\r\n *\r\n * @param {string} name\r\n * @param {number} ttl\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nENS.prototype.setTTL = function (name, ttl, txConfig, callback) {\n  return this.registry.setTTL(name, ttl, txConfig, callback);\n};\n/**\r\n * Returns the owner by the given name and current configured or detected Registry\r\n *\r\n * @method getOwner\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nENS.prototype.getOwner = function (name, callback) {\n  return this.registry.getOwner(name, callback);\n};\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method setOwner\r\n *\r\n * @param {string} name\r\n * @param {string} address\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nENS.prototype.setOwner = function (name, address, txConfig, callback) {\n  return this.registry.setOwner(name, address, txConfig, callback);\n};\n/**\r\n * Returns the address record associated with a name.\r\n *\r\n * @method getAddress\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nENS.prototype.getAddress = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'addr', []).call(callback);\n};\n/**\r\n * Sets a new address\r\n *\r\n * @method setAddress\r\n *\r\n * @param {string} name\r\n * @param {string} address\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nENS.prototype.setAddress = function (name, address, txConfig, callback) {\n  return this.resolverMethodHandler.method(name, 'setAddr', [address]).send(txConfig, callback);\n};\n/**\r\n * Returns the public key\r\n *\r\n * @method getPubkey\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nENS.prototype.getPubkey = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'pubkey', [], null, callback).call(callback);\n};\n/**\r\n * Set the new public key\r\n *\r\n * @method setPubkey\r\n *\r\n * @param {string} name\r\n * @param {string} x\r\n * @param {string} y\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nENS.prototype.setPubkey = function (name, x, y, txConfig, callback) {\n  return this.resolverMethodHandler.method(name, 'setPubkey', [x, y]).send(txConfig, callback);\n};\n/**\r\n * Returns the content\r\n *\r\n * @method getContent\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nENS.prototype.getContent = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'content', []).call(callback);\n};\n/**\r\n * Set the content\r\n *\r\n * @method setContent\r\n *\r\n * @param {string} name\r\n * @param {string} hash\r\n * @param {function} callback\r\n * @param {TransactionConfig} txConfig\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nENS.prototype.setContent = function (name, hash, txConfig, callback) {\n  return this.resolverMethodHandler.method(name, 'setContent', [hash]).send(txConfig, callback);\n};\n/**\r\n * Returns the contenthash\r\n *\r\n * @method getContenthash\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<ContentHash>}\r\n */\n\n\nENS.prototype.getContenthash = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'contenthash', [], contenthash.decode).call(callback);\n};\n/**\r\n * Set the contenthash\r\n *\r\n * @method setContent\r\n *\r\n * @param {string} name\r\n * @param {string} hash\r\n * @param {function} callback\r\n * @param {TransactionConfig} txConfig\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nENS.prototype.setContenthash = function (name, hash, txConfig, callback) {\n  var encoded;\n\n  try {\n    encoded = contenthash.encode(hash);\n  } catch (err) {\n    var error = new Error('Could not encode ' + hash + '. See docs for supported hash protocols.');\n\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n\n    throw error;\n  }\n\n  return this.resolverMethodHandler.method(name, 'setContenthash', [encoded]).send(txConfig, callback);\n};\n/**\r\n * Get the multihash\r\n *\r\n * @method getMultihash\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nENS.prototype.getMultihash = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'multihash', []).call(callback);\n};\n/**\r\n * Set the multihash\r\n *\r\n * @method setMultihash\r\n *\r\n * @param {string} name\r\n * @param {string} hash\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nENS.prototype.setMultihash = function (name, hash, txConfig, callback) {\n  return this.resolverMethodHandler.method(name, 'multihash', [hash]).send(txConfig, callback);\n};\n/**\r\n * Checks if the current used network is synced and looks for ENS support there.\r\n * Throws an error if not.\r\n *\r\n * @returns {Promise<string>}\r\n */\n\n\nENS.prototype.checkNetwork = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var now, block, headAge, networkType, addr;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          now = new Date() / 1000;\n\n          if (!(!this._lastSyncCheck || now - this._lastSyncCheck > 3600)) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 4;\n          return this.eth.getBlock('latest');\n\n        case 4:\n          block = _context.sent;\n          headAge = now - block.timestamp;\n\n          if (!(headAge > 3600)) {\n            _context.next = 8;\n            break;\n          }\n\n          throw new Error(\"Network not synced; last block was \" + headAge + \" seconds ago\");\n\n        case 8:\n          this._lastSyncCheck = now;\n\n        case 9:\n          if (!this.registryAddress) {\n            _context.next = 11;\n            break;\n          }\n\n          return _context.abrupt(\"return\", this.registryAddress);\n\n        case 11:\n          if (this._detectedAddress) {\n            _context.next = 20;\n            break;\n          }\n\n          _context.next = 14;\n          return this.eth.net.getNetworkType();\n\n        case 14:\n          networkType = _context.sent;\n          addr = config.addresses[networkType];\n\n          if (!(typeof addr === 'undefined')) {\n            _context.next = 18;\n            break;\n          }\n\n          throw new Error(\"ENS is not supported on network \" + networkType);\n\n        case 18:\n          this._detectedAddress = addr;\n          return _context.abrupt(\"return\", this._detectedAddress);\n\n        case 20:\n          return _context.abrupt(\"return\", this._detectedAddress);\n\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee, this);\n}));\nmodule.exports = ENS;","map":{"version":3,"sources":["C:/ngmi/node_modules/web3-eth-ens/lib/ENS.js"],"names":["_","require","config","formatters","utils","Registry","ResolverMethodHandler","contenthash","ENS","eth","registryAddress","_detectedAddress","_lastSyncCheck","Object","defineProperty","get","enumerable","registry","set","value","inputAddressFormatter","prototype","supportsInterface","name","interfaceId","callback","getResolver","then","resolver","isHexStrict","sha3","slice","methods","call","catch","error","isFunction","setResolver","address","txConfig","setRecord","owner","ttl","setSubnodeRecord","label","setApprovalForAll","operator","approved","isApprovedForAll","recordExists","setSubnodeOwner","getTTL","setTTL","getOwner","setOwner","getAddress","resolverMethodHandler","method","setAddress","send","getPubkey","setPubkey","x","y","getContent","setContent","hash","getContenthash","decode","setContenthash","encoded","encode","err","Error","getMultihash","setMultihash","checkNetwork","now","Date","getBlock","block","headAge","timestamp","net","getNetworkType","networkType","addr","addresses","module","exports"],"mappings":"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","sourcesContent":["/*\r\n    This file is part of web3.js.\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/**\r\n * @file ENS.js\r\n *\r\n * @author Samuel Furter <samuel@ethereum.org>\r\n * @date 2018\r\n */\r\n\"use strict\";\r\nvar _ = require('underscore');\r\nvar config = require('./config');\r\nvar formatters = require('web3-core-helpers').formatters;\r\nvar utils = require('web3-utils');\r\nvar Registry = require('./contracts/Registry');\r\nvar ResolverMethodHandler = require('./lib/ResolverMethodHandler');\r\nvar contenthash = require('./lib/contentHash');\r\n/**\r\n * Constructs a new instance of ENS\r\n *\r\n * @param {Eth} eth\r\n *\r\n * @constructor\r\n */\r\nfunction ENS(eth) {\r\n    this.eth = eth;\r\n    var registryAddress = null;\r\n    this._detectedAddress = null;\r\n    this._lastSyncCheck = null;\r\n    Object.defineProperty(this, 'registry', {\r\n        get: function () {\r\n            return new Registry(this);\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'resolverMethodHandler', {\r\n        get: function () {\r\n            return new ResolverMethodHandler(this.registry);\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'registryAddress', {\r\n        get: function () {\r\n            return registryAddress;\r\n        },\r\n        set: function (value) {\r\n            if (value === null) {\r\n                registryAddress = value;\r\n                return;\r\n            }\r\n            registryAddress = formatters.inputAddressFormatter(value);\r\n        },\r\n        enumerable: true\r\n    });\r\n}\r\n/**\r\n * Returns true if the given interfaceId is supported and otherwise false.\r\n *\r\n * @method supportsInterface\r\n *\r\n * @param {string} name\r\n * @param {string} interfaceId\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<boolean>}\r\n */\r\nENS.prototype.supportsInterface = function (name, interfaceId, callback) {\r\n    return this.getResolver(name).then(function (resolver) {\r\n        if (!utils.isHexStrict(interfaceId)) {\r\n            interfaceId = utils.sha3(interfaceId).slice(0, 10);\r\n        }\r\n        return resolver.methods.supportsInterface(interfaceId).call(callback);\r\n    }).catch(function (error) {\r\n        if (_.isFunction(callback)) {\r\n            callback(error, null);\r\n            return;\r\n        }\r\n        throw error;\r\n    });\r\n};\r\n/**\r\n * Returns the Resolver by the given address\r\n *\r\n * @deprecated Please use the \"getResolver\" method instead of \"resolver\"\r\n *\r\n * @method resolver\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<Contract>}\r\n */\r\nENS.prototype.resolver = function (name, callback) {\r\n    return this.registry.resolver(name, callback);\r\n};\r\n/**\r\n * Returns the Resolver by the given address\r\n *\r\n * @method getResolver\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<Contract>}\r\n */\r\nENS.prototype.getResolver = function (name, callback) {\r\n    return this.registry.getResolver(name, callback);\r\n};\r\n/**\r\n * Does set the resolver of the given name\r\n *\r\n * @method setResolver\r\n *\r\n * @param {string} name\r\n * @param {string} address\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nENS.prototype.setResolver = function (name, address, txConfig, callback) {\r\n    return this.registry.setResolver(name, address, txConfig, callback);\r\n};\r\n/**\r\n * Sets the owner, resolver, and TTL for an ENS record in a single operation.\r\n *\r\n * @method setRecord\r\n *\r\n * @param {string} name\r\n * @param {string} owner\r\n * @param {string} resolver\r\n * @param {string | number} ttl\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nENS.prototype.setRecord = function (name, owner, resolver, ttl, txConfig, callback) {\r\n    return this.registry.setRecord(name, owner, resolver, ttl, txConfig, callback);\r\n};\r\n/**\r\n * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.\r\n *\r\n * @method setSubnodeRecord\r\n *\r\n * @param {string} name\r\n * @param {string} label\r\n * @param {string} owner\r\n * @param {string} resolver\r\n * @param {string | number} ttl\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nENS.prototype.setSubnodeRecord = function (name, label, owner, resolver, ttl, txConfig, callback) {\r\n    return this.registry.setSubnodeRecord(name, label, owner, resolver, ttl, txConfig, callback);\r\n};\r\n/**\r\n * Sets or clears an approval by the given operator.\r\n *\r\n * @method setApprovalForAll\r\n *\r\n * @param {string} operator\r\n * @param {boolean} approved\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nENS.prototype.setApprovalForAll = function (operator, approved, txConfig, callback) {\r\n    return this.registry.setApprovalForAll(operator, approved, txConfig, callback);\r\n};\r\n/**\r\n * Returns true if the operator is approved\r\n *\r\n * @method isApprovedForAll\r\n *\r\n * @param {string} owner\r\n * @param {string} operator\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<boolean>}\r\n */\r\nENS.prototype.isApprovedForAll = function (owner, operator, callback) {\r\n    return this.registry.isApprovedForAll(owner, operator, callback);\r\n};\r\n/**\r\n * Returns true if the record exists\r\n *\r\n * @method recordExists\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<boolean>}\r\n */\r\nENS.prototype.recordExists = function (name, callback) {\r\n    return this.registry.recordExists(name, callback);\r\n};\r\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method setSubnodeOwner\r\n *\r\n * @param {string} name\r\n * @param {string} label\r\n * @param {string} address\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nENS.prototype.setSubnodeOwner = function (name, label, address, txConfig, callback) {\r\n    return this.registry.setSubnodeOwner(name, label, address, txConfig, callback);\r\n};\r\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method getTTL\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nENS.prototype.getTTL = function (name, callback) {\r\n    return this.registry.getTTL(name, callback);\r\n};\r\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method setTTL\r\n *\r\n * @param {string} name\r\n * @param {number} ttl\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nENS.prototype.setTTL = function (name, ttl, txConfig, callback) {\r\n    return this.registry.setTTL(name, ttl, txConfig, callback);\r\n};\r\n/**\r\n * Returns the owner by the given name and current configured or detected Registry\r\n *\r\n * @method getOwner\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nENS.prototype.getOwner = function (name, callback) {\r\n    return this.registry.getOwner(name, callback);\r\n};\r\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method setOwner\r\n *\r\n * @param {string} name\r\n * @param {string} address\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nENS.prototype.setOwner = function (name, address, txConfig, callback) {\r\n    return this.registry.setOwner(name, address, txConfig, callback);\r\n};\r\n/**\r\n * Returns the address record associated with a name.\r\n *\r\n * @method getAddress\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nENS.prototype.getAddress = function (name, callback) {\r\n    return this.resolverMethodHandler.method(name, 'addr', []).call(callback);\r\n};\r\n/**\r\n * Sets a new address\r\n *\r\n * @method setAddress\r\n *\r\n * @param {string} name\r\n * @param {string} address\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nENS.prototype.setAddress = function (name, address, txConfig, callback) {\r\n    return this.resolverMethodHandler.method(name, 'setAddr', [address]).send(txConfig, callback);\r\n};\r\n/**\r\n * Returns the public key\r\n *\r\n * @method getPubkey\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nENS.prototype.getPubkey = function (name, callback) {\r\n    return this.resolverMethodHandler.method(name, 'pubkey', [], null, callback).call(callback);\r\n};\r\n/**\r\n * Set the new public key\r\n *\r\n * @method setPubkey\r\n *\r\n * @param {string} name\r\n * @param {string} x\r\n * @param {string} y\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nENS.prototype.setPubkey = function (name, x, y, txConfig, callback) {\r\n    return this.resolverMethodHandler.method(name, 'setPubkey', [x, y]).send(txConfig, callback);\r\n};\r\n/**\r\n * Returns the content\r\n *\r\n * @method getContent\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nENS.prototype.getContent = function (name, callback) {\r\n    return this.resolverMethodHandler.method(name, 'content', []).call(callback);\r\n};\r\n/**\r\n * Set the content\r\n *\r\n * @method setContent\r\n *\r\n * @param {string} name\r\n * @param {string} hash\r\n * @param {function} callback\r\n * @param {TransactionConfig} txConfig\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nENS.prototype.setContent = function (name, hash, txConfig, callback) {\r\n    return this.resolverMethodHandler.method(name, 'setContent', [hash]).send(txConfig, callback);\r\n};\r\n/**\r\n * Returns the contenthash\r\n *\r\n * @method getContenthash\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<ContentHash>}\r\n */\r\nENS.prototype.getContenthash = function (name, callback) {\r\n    return this.resolverMethodHandler.method(name, 'contenthash', [], contenthash.decode).call(callback);\r\n};\r\n/**\r\n * Set the contenthash\r\n *\r\n * @method setContent\r\n *\r\n * @param {string} name\r\n * @param {string} hash\r\n * @param {function} callback\r\n * @param {TransactionConfig} txConfig\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nENS.prototype.setContenthash = function (name, hash, txConfig, callback) {\r\n    var encoded;\r\n    try {\r\n        encoded = contenthash.encode(hash);\r\n    }\r\n    catch (err) {\r\n        var error = new Error('Could not encode ' + hash + '. See docs for supported hash protocols.');\r\n        if (_.isFunction(callback)) {\r\n            callback(error, null);\r\n            return;\r\n        }\r\n        throw error;\r\n    }\r\n    return this.resolverMethodHandler.method(name, 'setContenthash', [encoded]).send(txConfig, callback);\r\n};\r\n/**\r\n * Get the multihash\r\n *\r\n * @method getMultihash\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nENS.prototype.getMultihash = function (name, callback) {\r\n    return this.resolverMethodHandler.method(name, 'multihash', []).call(callback);\r\n};\r\n/**\r\n * Set the multihash\r\n *\r\n * @method setMultihash\r\n *\r\n * @param {string} name\r\n * @param {string} hash\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nENS.prototype.setMultihash = function (name, hash, txConfig, callback) {\r\n    return this.resolverMethodHandler.method(name, 'multihash', [hash]).send(txConfig, callback);\r\n};\r\n/**\r\n * Checks if the current used network is synced and looks for ENS support there.\r\n * Throws an error if not.\r\n *\r\n * @returns {Promise<string>}\r\n */\r\nENS.prototype.checkNetwork = async function () {\r\n    var now = new Date() / 1000;\r\n    if (!this._lastSyncCheck || (now - this._lastSyncCheck) > 3600) {\r\n        var block = await this.eth.getBlock('latest');\r\n        var headAge = now - block.timestamp;\r\n        if (headAge > 3600) {\r\n            throw new Error(\"Network not synced; last block was \" + headAge + \" seconds ago\");\r\n        }\r\n        this._lastSyncCheck = now;\r\n    }\r\n    if (this.registryAddress) {\r\n        return this.registryAddress;\r\n    }\r\n    if (!this._detectedAddress) {\r\n        var networkType = await this.eth.net.getNetworkType();\r\n        var addr = config.addresses[networkType];\r\n        if (typeof addr === 'undefined') {\r\n            throw new Error(\"ENS is not supported on network \" + networkType);\r\n        }\r\n        this._detectedAddress = addr;\r\n        return this._detectedAddress;\r\n    }\r\n    return this._detectedAddress;\r\n};\r\nmodule.exports = ENS;\r\n"]},"metadata":{},"sourceType":"script"}