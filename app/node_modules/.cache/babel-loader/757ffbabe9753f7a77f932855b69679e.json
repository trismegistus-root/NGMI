{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;\n\nvar _a = require('ethereum-cryptography/keccak'),\n    keccak224 = _a.keccak224,\n    keccak384 = _a.keccak384,\n    k256 = _a.keccak256,\n    keccak512 = _a.keccak512;\n\nvar createHash = require('create-hash');\n\nvar ethjsUtil = require('ethjs-util');\n\nvar rlp = require(\"rlp\");\n\nvar bytes_1 = require(\"./bytes\");\n/**\r\n * Creates Keccak hash of the input\r\n * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value\r\n * it's interpreted as hexadecimal, otherwise as utf8.\r\n * @param bits The Keccak width\r\n */\n\n\nexports.keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {\n    a = Buffer.from(a, 'utf8');\n  } else {\n    a = bytes_1.toBuffer(a);\n  }\n\n  if (!bits) bits = 256;\n\n  switch (bits) {\n    case 224:\n      {\n        return keccak224(a);\n      }\n\n    case 256:\n      {\n        return k256(a);\n      }\n\n    case 384:\n      {\n        return keccak384(a);\n      }\n\n    case 512:\n      {\n        return keccak512(a);\n      }\n\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\" + bits);\n      }\n  }\n};\n/**\r\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\r\n * @param a The input data (Buffer|Array|String|Number)\r\n */\n\n\nexports.keccak256 = function (a) {\n  return exports.keccak(a);\n};\n/**\r\n * Creates SHA256 hash of the input.\r\n * @param a The input data (Buffer|Array|String|Number)\r\n */\n\n\nexports.sha256 = function (a) {\n  a = bytes_1.toBuffer(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\r\n * Creates RIPEMD160 hash of the input.\r\n * @param a The input data (Buffer|Array|String|Number)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\n\n\nexports.ripemd160 = function (a, padded) {\n  a = bytes_1.toBuffer(a);\n  var hash = createHash('rmd160').update(a).digest();\n\n  if (padded === true) {\n    return bytes_1.setLength(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\r\n * Creates SHA-3 hash of the RLP encoded version of the input.\r\n * @param a The input data\r\n */\n\n\nexports.rlphash = function (a) {\n  return exports.keccak(rlp.encode(a));\n};","map":{"version":3,"sources":["../src/hash.ts"],"names":[],"mappings":";;;;;;;AAAM,IAAA,EAAA,GAAuD,OAAO,CAAC,8BAAD,CAA9D;AAAA,IAAE,SAAS,GAAA,EAAA,CAAA,SAAX;AAAA,IAAa,SAAS,GAAA,EAAA,CAAA,SAAtB;AAAA,IAAmC,IAAI,GAAA,EAAA,CAAA,SAAvC;AAAA,IAAyC,SAAS,GAAA,EAAA,CAAA,SAAlD;;AACN,IAAM,UAAU,GAAG,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAM,SAAS,GAAG,OAAO,CAAC,YAAD,CAAzB;;AACA,IAAA,GAAA,GAAA,OAAA,CAAA,KAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAEA;;;;;AAKG;;;AACU,OAAA,CAAA,MAAA,GAAS,UAAS,CAAT,EAAiB,IAAjB,EAAmC;AAAlB,MAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,IAAA,GAAA,GAAA;AAAkB;;AACvD,MAAI,OAAO,CAAP,KAAa,QAAb,IAAyB,CAAC,SAAS,CAAC,WAAV,CAAsB,CAAtB,CAA9B,EAAwD;AACtD,IAAA,CAAC,GAAG,MAAM,CAAC,IAAP,CAAY,CAAZ,EAAe,MAAf,CAAJ;AACD,GAFD,MAEO;AACL,IAAA,CAAC,GAAG,OAAA,CAAA,QAAA,CAAS,CAAT,CAAJ;AACD;;AAED,MAAI,CAAC,IAAL,EAAW,IAAI,GAAG,GAAP;;AAEX,UAAQ,IAAR;AACE,SAAK,GAAL;AAAU;AACR,eAAO,SAAS,CAAC,CAAD,CAAhB;AACD;;AACD,SAAK,GAAL;AAAU;AACR,eAAO,IAAI,CAAC,CAAD,CAAX;AACD;;AACD,SAAK,GAAL;AAAU;AACR,eAAO,SAAS,CAAC,CAAD,CAAhB;AACD;;AACD,SAAK,GAAL;AAAU;AACR,eAAO,SAAS,CAAC,CAAD,CAAhB;AACD;;AACD;AAAS;AACP,cAAM,IAAI,KAAJ,CAAU,6BAA2B,IAArC,CAAN;AACD;AAfH;AAiBD,CA1BY;AA4Bb;;;AAGG;;;AACU,OAAA,CAAA,SAAA,GAAY,UAAS,CAAT,EAAe;AACtC,SAAO,OAAA,CAAA,MAAA,CAAO,CAAP,CAAP;AACD,CAFY;AAIb;;;AAGG;;;AACU,OAAA,CAAA,MAAA,GAAS,UAAS,CAAT,EAAe;AACnC,EAAA,CAAC,GAAG,OAAA,CAAA,QAAA,CAAS,CAAT,CAAJ;AACA,SAAO,UAAU,CAAC,QAAD,CAAV,CACJ,MADI,CACG,CADH,EAEJ,MAFI,EAAP;AAGD,CALY;AAOb;;;;AAIG;;;AACU,OAAA,CAAA,SAAA,GAAY,UAAS,CAAT,EAAiB,MAAjB,EAAgC;AACvD,EAAA,CAAC,GAAG,OAAA,CAAA,QAAA,CAAS,CAAT,CAAJ;AACA,MAAM,IAAI,GAAG,UAAU,CAAC,QAAD,CAAV,CACV,MADU,CACH,CADG,EAEV,MAFU,EAAb;;AAGA,MAAI,MAAM,KAAK,IAAf,EAAqB;AACnB,WAAO,OAAA,CAAA,SAAA,CAAU,IAAV,EAAgB,EAAhB,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAP;AACD;AACF,CAVY;AAYb;;;AAGG;;;AACU,OAAA,CAAA,OAAA,GAAU,UAAS,CAAT,EAAqB;AAC1C,SAAO,OAAA,CAAA,MAAA,CAAO,GAAG,CAAC,MAAJ,CAAW,CAAX,CAAP,CAAP;AACD,CAFY","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;\r\nvar _a = require('ethereum-cryptography/keccak'), keccak224 = _a.keccak224, keccak384 = _a.keccak384, k256 = _a.keccak256, keccak512 = _a.keccak512;\r\nvar createHash = require('create-hash');\r\nvar ethjsUtil = require('ethjs-util');\r\nvar rlp = require(\"rlp\");\r\nvar bytes_1 = require(\"./bytes\");\r\n/**\r\n * Creates Keccak hash of the input\r\n * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value\r\n * it's interpreted as hexadecimal, otherwise as utf8.\r\n * @param bits The Keccak width\r\n */\r\nexports.keccak = function (a, bits) {\r\n    if (bits === void 0) { bits = 256; }\r\n    if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {\r\n        a = Buffer.from(a, 'utf8');\r\n    }\r\n    else {\r\n        a = bytes_1.toBuffer(a);\r\n    }\r\n    if (!bits)\r\n        bits = 256;\r\n    switch (bits) {\r\n        case 224: {\r\n            return keccak224(a);\r\n        }\r\n        case 256: {\r\n            return k256(a);\r\n        }\r\n        case 384: {\r\n            return keccak384(a);\r\n        }\r\n        case 512: {\r\n            return keccak512(a);\r\n        }\r\n        default: {\r\n            throw new Error(\"Invald algorithm: keccak\" + bits);\r\n        }\r\n    }\r\n};\r\n/**\r\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\r\n * @param a The input data (Buffer|Array|String|Number)\r\n */\r\nexports.keccak256 = function (a) {\r\n    return exports.keccak(a);\r\n};\r\n/**\r\n * Creates SHA256 hash of the input.\r\n * @param a The input data (Buffer|Array|String|Number)\r\n */\r\nexports.sha256 = function (a) {\r\n    a = bytes_1.toBuffer(a);\r\n    return createHash('sha256')\r\n        .update(a)\r\n        .digest();\r\n};\r\n/**\r\n * Creates RIPEMD160 hash of the input.\r\n * @param a The input data (Buffer|Array|String|Number)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\r\nexports.ripemd160 = function (a, padded) {\r\n    a = bytes_1.toBuffer(a);\r\n    var hash = createHash('rmd160')\r\n        .update(a)\r\n        .digest();\r\n    if (padded === true) {\r\n        return bytes_1.setLength(hash, 32);\r\n    }\r\n    else {\r\n        return hash;\r\n    }\r\n};\r\n/**\r\n * Creates SHA-3 hash of the RLP encoded version of the input.\r\n * @param a The input data\r\n */\r\nexports.rlphash = function (a) {\r\n    return exports.keccak(rlp.encode(a));\r\n};\r\n//# sourceMappingURL=hash.js.map"]},"metadata":{},"sourceType":"script"}