{"ast":null,"code":"/*\r\n    This file is part of web3.js.\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n\n/**\r\n * @file Registry.js\r\n *\r\n * @author Samuel Furter <samuel@ethereum.org>\r\n * @date 2018\r\n */\n\"use strict\";\n\nvar _ = require('underscore');\n\nvar Contract = require('web3-eth-contract');\n\nvar namehash = require('eth-ens-namehash');\n\nvar PromiEvent = require('web3-core-promievent');\n\nvar formatters = require('web3-core-helpers').formatters;\n\nvar utils = require('web3-utils');\n\nvar REGISTRY_ABI = require('../resources/ABI/Registry');\n\nvar RESOLVER_ABI = require('../resources/ABI/Resolver');\n/**\r\n * A wrapper around the ENS registry contract.\r\n *\r\n * @method Registry\r\n * @param {Ens} ens\r\n * @constructor\r\n */\n\n\nfunction Registry(ens) {\n  var self = this;\n  this.ens = ens;\n  this.contract = ens.checkNetwork().then(function (address) {\n    var contract = new Contract(REGISTRY_ABI, address);\n    contract.setProvider(self.ens.eth.currentProvider);\n    return contract;\n  });\n}\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @deprecated Please use the \"getOwner\" method instead of \"owner\"\r\n *\r\n * @method owner\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<string>}\r\n */\n\n\nRegistry.prototype.owner = function (name, callback) {\n  console.warn('Deprecated: Please use the \"getOwner\" method instead of \"owner\".');\n  return this.getOwner(name, callback);\n};\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method getOwner\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<string>}\r\n */\n\n\nRegistry.prototype.getOwner = function (name, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.owner(namehash.hash(name)).call();\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method setOwner\r\n *\r\n * @param {string} name\r\n * @param {string} address\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nRegistry.prototype.setOwner = function (name, address, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setOwner(namehash.hash(name), formatters.inputAddressFormatter(address)).send(txConfig);\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\r\n * Returns the TTL of the given node by his name\r\n *\r\n * @method getTTL\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returnss {Promise<string>}\r\n */\n\n\nRegistry.prototype.getTTL = function (name, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.ttl(namehash.hash(name)).call();\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method setTTL\r\n *\r\n * @param {string} name\r\n * @param {number} ttl\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nRegistry.prototype.setTTL = function (name, ttl, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setTTL(namehash.hash(name), ttl).send(txConfig);\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method setSubnodeOwner\r\n *\r\n * @param {string} name\r\n * @param {string} label\r\n * @param {string} address\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nRegistry.prototype.setSubnodeOwner = function (name, label, address, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n\n  if (!utils.isHexStrict(label)) {\n    label = utils.sha3(label);\n  }\n\n  this.contract.then(function (contract) {\n    return contract.methods.setSubnodeOwner(namehash.hash(name), label, formatters.inputAddressFormatter(address)).send(txConfig);\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\r\n * Sets the owner, resolver, and TTL for an ENS record in a single operation.\r\n *\r\n * @method setRecord\r\n *\r\n * @param {string} name\r\n * @param {string} owner\r\n * @param {string} resolver\r\n * @param {string | number} ttl\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nRegistry.prototype.setRecord = function (name, owner, resolver, ttl, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setRecord(namehash.hash(name), formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(resolver), ttl).send(txConfig);\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\r\n * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.\r\n *\r\n * @method setSubnodeRecord\r\n *\r\n * @param {string} name\r\n * @param {string} label\r\n * @param {string} owner\r\n * @param {string} resolver\r\n * @param {string | number} ttl\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nRegistry.prototype.setSubnodeRecord = function (name, label, owner, resolver, ttl, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n\n  if (!utils.isHexStrict(label)) {\n    label = utils.sha3(label);\n  }\n\n  this.contract.then(function (contract) {\n    return contract.methods.setSubnodeRecord(namehash.hash(name), label, formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(resolver), ttl).send(txConfig);\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\r\n * Sets or clears an approval by the given operator.\r\n *\r\n * @method setApprovalForAll\r\n *\r\n * @param {string} operator\r\n * @param {boolean} approved\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nRegistry.prototype.setApprovalForAll = function (operator, approved, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setApprovalForAll(formatters.inputAddressFormatter(operator), approved).send(txConfig);\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\r\n * Returns true if the operator is approved\r\n *\r\n * @method isApprovedForAll\r\n *\r\n * @param {string} owner\r\n * @param {string} operator\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<boolean>}\r\n */\n\n\nRegistry.prototype.isApprovedForAll = function (owner, operator, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.isApprovedForAll(formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(operator)).call();\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\r\n * Returns true if the record exists\r\n *\r\n * @method recordExists\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<boolean>}\r\n */\n\n\nRegistry.prototype.recordExists = function (name, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.recordExists(namehash.hash(name)).call();\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\r\n * Returns the resolver contract associated with a name.\r\n *\r\n * @deprecated Please use the \"getResolver\" method instead of \"resolver\"\r\n *\r\n * @method resolver\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<Contract>}\r\n */\n\n\nRegistry.prototype.resolver = function (name, callback) {\n  console.warn('Deprecated: Please use the \"getResolver\" method instead of \"resolver\".');\n  return this.getResolver(name, callback);\n};\n/**\r\n * Returns the resolver contract associated with a name.\r\n *\r\n * @method getResolver\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<Contract>}\r\n */\n\n\nRegistry.prototype.getResolver = function (name, callback) {\n  var self = this;\n  return this.contract.then(function (contract) {\n    return contract.methods.resolver(namehash.hash(name)).call();\n  }).then(function (address) {\n    var contract = new Contract(RESOLVER_ABI, address);\n    contract.setProvider(self.ens.eth.currentProvider);\n\n    if (_.isFunction(callback)) {\n      // It's required to pass the contract to the first argument to be backward compatible and to have the required consistency\n      callback(contract, contract);\n      return;\n    }\n\n    return contract;\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n\n    throw error;\n  });\n};\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method setResolver\r\n *\r\n * @param {string} name\r\n * @param {string} address\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\n\n\nRegistry.prototype.setResolver = function (name, address, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setResolver(namehash.hash(name), formatters.inputAddressFormatter(address)).send(txConfig);\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n\nmodule.exports = Registry;","map":{"version":3,"sources":["C:/ngmi/node_modules/web3-eth-ens/lib/contracts/Registry.js"],"names":["_","require","Contract","namehash","PromiEvent","formatters","utils","REGISTRY_ABI","RESOLVER_ABI","Registry","ens","self","contract","checkNetwork","then","address","setProvider","eth","currentProvider","prototype","owner","name","callback","console","warn","getOwner","promiEvent","methods","hash","call","receipt","isFunction","resolve","catch","error","reject","eventEmitter","setOwner","txConfig","inputAddressFormatter","send","getTTL","ttl","setTTL","setSubnodeOwner","label","isHexStrict","sha3","setRecord","resolver","setSubnodeRecord","setApprovalForAll","operator","approved","isApprovedForAll","recordExists","getResolver","setResolver","module","exports"],"mappings":"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","sourcesContent":["/*\r\n    This file is part of web3.js.\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/**\r\n * @file Registry.js\r\n *\r\n * @author Samuel Furter <samuel@ethereum.org>\r\n * @date 2018\r\n */\r\n\"use strict\";\r\nvar _ = require('underscore');\r\nvar Contract = require('web3-eth-contract');\r\nvar namehash = require('eth-ens-namehash');\r\nvar PromiEvent = require('web3-core-promievent');\r\nvar formatters = require('web3-core-helpers').formatters;\r\nvar utils = require('web3-utils');\r\nvar REGISTRY_ABI = require('../resources/ABI/Registry');\r\nvar RESOLVER_ABI = require('../resources/ABI/Resolver');\r\n/**\r\n * A wrapper around the ENS registry contract.\r\n *\r\n * @method Registry\r\n * @param {Ens} ens\r\n * @constructor\r\n */\r\nfunction Registry(ens) {\r\n    var self = this;\r\n    this.ens = ens;\r\n    this.contract = ens.checkNetwork().then(function (address) {\r\n        var contract = new Contract(REGISTRY_ABI, address);\r\n        contract.setProvider(self.ens.eth.currentProvider);\r\n        return contract;\r\n    });\r\n}\r\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @deprecated Please use the \"getOwner\" method instead of \"owner\"\r\n *\r\n * @method owner\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<string>}\r\n */\r\nRegistry.prototype.owner = function (name, callback) {\r\n    console.warn('Deprecated: Please use the \"getOwner\" method instead of \"owner\".');\r\n    return this.getOwner(name, callback);\r\n};\r\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method getOwner\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<string>}\r\n */\r\nRegistry.prototype.getOwner = function (name, callback) {\r\n    var promiEvent = new PromiEvent(true);\r\n    this.contract.then(function (contract) {\r\n        return contract.methods.owner(namehash.hash(name)).call();\r\n    }).then(function (receipt) {\r\n        if (_.isFunction(callback)) {\r\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\r\n            callback(receipt, receipt);\r\n            return;\r\n        }\r\n        promiEvent.resolve(receipt);\r\n    }).catch(function (error) {\r\n        if (_.isFunction(callback)) {\r\n            callback(error, null);\r\n            return;\r\n        }\r\n        promiEvent.reject(error);\r\n    });\r\n    return promiEvent.eventEmitter;\r\n};\r\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method setOwner\r\n *\r\n * @param {string} name\r\n * @param {string} address\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nRegistry.prototype.setOwner = function (name, address, txConfig, callback) {\r\n    var promiEvent = new PromiEvent(true);\r\n    this.contract.then(function (contract) {\r\n        return contract.methods.setOwner(namehash.hash(name), formatters.inputAddressFormatter(address)).send(txConfig);\r\n    }).then(function (receipt) {\r\n        if (_.isFunction(callback)) {\r\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\r\n            callback(receipt, receipt);\r\n            return;\r\n        }\r\n        promiEvent.resolve(receipt);\r\n    }).catch(function (error) {\r\n        if (_.isFunction(callback)) {\r\n            callback(error, null);\r\n            return;\r\n        }\r\n        promiEvent.reject(error);\r\n    });\r\n    return promiEvent.eventEmitter;\r\n};\r\n/**\r\n * Returns the TTL of the given node by his name\r\n *\r\n * @method getTTL\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returnss {Promise<string>}\r\n */\r\nRegistry.prototype.getTTL = function (name, callback) {\r\n    var promiEvent = new PromiEvent(true);\r\n    this.contract.then(function (contract) {\r\n        return contract.methods.ttl(namehash.hash(name)).call();\r\n    }).then(function (receipt) {\r\n        if (_.isFunction(callback)) {\r\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\r\n            callback(receipt, receipt);\r\n            return;\r\n        }\r\n        promiEvent.resolve(receipt);\r\n    }).catch(function (error) {\r\n        if (_.isFunction(callback)) {\r\n            callback(error, null);\r\n            return;\r\n        }\r\n        promiEvent.reject(error);\r\n    });\r\n    return promiEvent.eventEmitter;\r\n};\r\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method setTTL\r\n *\r\n * @param {string} name\r\n * @param {number} ttl\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nRegistry.prototype.setTTL = function (name, ttl, txConfig, callback) {\r\n    var promiEvent = new PromiEvent(true);\r\n    this.contract.then(function (contract) {\r\n        return contract.methods.setTTL(namehash.hash(name), ttl).send(txConfig);\r\n    }).then(function (receipt) {\r\n        if (_.isFunction(callback)) {\r\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\r\n            callback(receipt, receipt);\r\n            return;\r\n        }\r\n        promiEvent.resolve(receipt);\r\n    }).catch(function (error) {\r\n        if (_.isFunction(callback)) {\r\n            callback(error, null);\r\n            return;\r\n        }\r\n        promiEvent.reject(error);\r\n    });\r\n    return promiEvent.eventEmitter;\r\n};\r\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method setSubnodeOwner\r\n *\r\n * @param {string} name\r\n * @param {string} label\r\n * @param {string} address\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nRegistry.prototype.setSubnodeOwner = function (name, label, address, txConfig, callback) {\r\n    var promiEvent = new PromiEvent(true);\r\n    if (!utils.isHexStrict(label)) {\r\n        label = utils.sha3(label);\r\n    }\r\n    this.contract.then(function (contract) {\r\n        return contract.methods.setSubnodeOwner(namehash.hash(name), label, formatters.inputAddressFormatter(address)).send(txConfig);\r\n    }).then(function (receipt) {\r\n        if (_.isFunction(callback)) {\r\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\r\n            callback(receipt, receipt);\r\n            return;\r\n        }\r\n        promiEvent.resolve(receipt);\r\n    }).catch(function (error) {\r\n        if (_.isFunction(callback)) {\r\n            callback(error, null);\r\n            return;\r\n        }\r\n        promiEvent.reject(error);\r\n    });\r\n    return promiEvent.eventEmitter;\r\n};\r\n/**\r\n * Sets the owner, resolver, and TTL for an ENS record in a single operation.\r\n *\r\n * @method setRecord\r\n *\r\n * @param {string} name\r\n * @param {string} owner\r\n * @param {string} resolver\r\n * @param {string | number} ttl\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nRegistry.prototype.setRecord = function (name, owner, resolver, ttl, txConfig, callback) {\r\n    var promiEvent = new PromiEvent(true);\r\n    this.contract.then(function (contract) {\r\n        return contract.methods.setRecord(namehash.hash(name), formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(resolver), ttl).send(txConfig);\r\n    }).then(function (receipt) {\r\n        if (_.isFunction(callback)) {\r\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\r\n            callback(receipt, receipt);\r\n            return;\r\n        }\r\n        promiEvent.resolve(receipt);\r\n    }).catch(function (error) {\r\n        if (_.isFunction(callback)) {\r\n            callback(error, null);\r\n            return;\r\n        }\r\n        promiEvent.reject(error);\r\n    });\r\n    return promiEvent.eventEmitter;\r\n};\r\n/**\r\n * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.\r\n *\r\n * @method setSubnodeRecord\r\n *\r\n * @param {string} name\r\n * @param {string} label\r\n * @param {string} owner\r\n * @param {string} resolver\r\n * @param {string | number} ttl\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nRegistry.prototype.setSubnodeRecord = function (name, label, owner, resolver, ttl, txConfig, callback) {\r\n    var promiEvent = new PromiEvent(true);\r\n    if (!utils.isHexStrict(label)) {\r\n        label = utils.sha3(label);\r\n    }\r\n    this.contract.then(function (contract) {\r\n        return contract.methods.setSubnodeRecord(namehash.hash(name), label, formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(resolver), ttl).send(txConfig);\r\n    }).then(function (receipt) {\r\n        if (_.isFunction(callback)) {\r\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\r\n            callback(receipt, receipt);\r\n            return;\r\n        }\r\n        promiEvent.resolve(receipt);\r\n    }).catch(function (error) {\r\n        if (_.isFunction(callback)) {\r\n            callback(error, null);\r\n            return;\r\n        }\r\n        promiEvent.reject(error);\r\n    });\r\n    return promiEvent.eventEmitter;\r\n};\r\n/**\r\n * Sets or clears an approval by the given operator.\r\n *\r\n * @method setApprovalForAll\r\n *\r\n * @param {string} operator\r\n * @param {boolean} approved\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nRegistry.prototype.setApprovalForAll = function (operator, approved, txConfig, callback) {\r\n    var promiEvent = new PromiEvent(true);\r\n    this.contract.then(function (contract) {\r\n        return contract.methods.setApprovalForAll(formatters.inputAddressFormatter(operator), approved).send(txConfig);\r\n    }).then(function (receipt) {\r\n        if (_.isFunction(callback)) {\r\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\r\n            callback(receipt, receipt);\r\n            return;\r\n        }\r\n        promiEvent.resolve(receipt);\r\n    }).catch(function (error) {\r\n        if (_.isFunction(callback)) {\r\n            callback(error, null);\r\n            return;\r\n        }\r\n        promiEvent.reject(error);\r\n    });\r\n    return promiEvent.eventEmitter;\r\n};\r\n/**\r\n * Returns true if the operator is approved\r\n *\r\n * @method isApprovedForAll\r\n *\r\n * @param {string} owner\r\n * @param {string} operator\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<boolean>}\r\n */\r\nRegistry.prototype.isApprovedForAll = function (owner, operator, callback) {\r\n    var promiEvent = new PromiEvent(true);\r\n    this.contract.then(function (contract) {\r\n        return contract.methods.isApprovedForAll(formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(operator)).call();\r\n    }).then(function (receipt) {\r\n        if (_.isFunction(callback)) {\r\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\r\n            callback(receipt, receipt);\r\n            return;\r\n        }\r\n        promiEvent.resolve(receipt);\r\n    }).catch(function (error) {\r\n        if (_.isFunction(callback)) {\r\n            callback(error, null);\r\n            return;\r\n        }\r\n        promiEvent.reject(error);\r\n    });\r\n    return promiEvent.eventEmitter;\r\n};\r\n/**\r\n * Returns true if the record exists\r\n *\r\n * @method recordExists\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<boolean>}\r\n */\r\nRegistry.prototype.recordExists = function (name, callback) {\r\n    var promiEvent = new PromiEvent(true);\r\n    this.contract.then(function (contract) {\r\n        return contract.methods.recordExists(namehash.hash(name)).call();\r\n    }).then(function (receipt) {\r\n        if (_.isFunction(callback)) {\r\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\r\n            callback(receipt, receipt);\r\n            return;\r\n        }\r\n        promiEvent.resolve(receipt);\r\n    }).catch(function (error) {\r\n        if (_.isFunction(callback)) {\r\n            callback(error, null);\r\n            return;\r\n        }\r\n        promiEvent.reject(error);\r\n    });\r\n    return promiEvent.eventEmitter;\r\n};\r\n/**\r\n * Returns the resolver contract associated with a name.\r\n *\r\n * @deprecated Please use the \"getResolver\" method instead of \"resolver\"\r\n *\r\n * @method resolver\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<Contract>}\r\n */\r\nRegistry.prototype.resolver = function (name, callback) {\r\n    console.warn('Deprecated: Please use the \"getResolver\" method instead of \"resolver\".');\r\n    return this.getResolver(name, callback);\r\n};\r\n/**\r\n * Returns the resolver contract associated with a name.\r\n *\r\n * @method getResolver\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<Contract>}\r\n */\r\nRegistry.prototype.getResolver = function (name, callback) {\r\n    var self = this;\r\n    return this.contract.then(function (contract) {\r\n        return contract.methods.resolver(namehash.hash(name)).call();\r\n    }).then(function (address) {\r\n        var contract = new Contract(RESOLVER_ABI, address);\r\n        contract.setProvider(self.ens.eth.currentProvider);\r\n        if (_.isFunction(callback)) {\r\n            // It's required to pass the contract to the first argument to be backward compatible and to have the required consistency\r\n            callback(contract, contract);\r\n            return;\r\n        }\r\n        return contract;\r\n    }).catch(function (error) {\r\n        if (_.isFunction(callback)) {\r\n            callback(error, null);\r\n            return;\r\n        }\r\n        throw error;\r\n    });\r\n};\r\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method setResolver\r\n *\r\n * @param {string} name\r\n * @param {string} address\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\r\nRegistry.prototype.setResolver = function (name, address, txConfig, callback) {\r\n    var promiEvent = new PromiEvent(true);\r\n    this.contract.then(function (contract) {\r\n        return contract.methods.setResolver(namehash.hash(name), formatters.inputAddressFormatter(address)).send(txConfig);\r\n    }).then(function (receipt) {\r\n        if (_.isFunction(callback)) {\r\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\r\n            callback(receipt, receipt);\r\n            return;\r\n        }\r\n        promiEvent.resolve(receipt);\r\n    }).catch(function (error) {\r\n        if (_.isFunction(callback)) {\r\n            callback(error, null);\r\n            return;\r\n        }\r\n        promiEvent.reject(error);\r\n    });\r\n    return promiEvent.eventEmitter;\r\n};\r\nmodule.exports = Registry;\r\n"]},"metadata":{},"sourceType":"script"}