{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:/ngmi/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/ngmi/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { arrayify, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nvar logger = new Logger(version);\nexport function checkResultErrors(result) {\n  // Find the first error (if any)\n  var errors = [];\n\n  var checkErrors = function checkErrors(path, object) {\n    if (!Array.isArray(object)) {\n      return;\n    }\n\n    for (var key in object) {\n      var childPath = path.slice();\n      childPath.push(key);\n\n      try {\n        checkErrors(childPath, object[key]);\n      } catch (error) {\n        errors.push({\n          path: childPath,\n          error: error\n        });\n      }\n    }\n  };\n\n  checkErrors([], result);\n  return errors;\n}\nexport var Coder = /*#__PURE__*/function () {\n  function Coder(name, type, localName, dynamic) {\n    _classCallCheck(this, Coder);\n\n    // @TODO: defineReadOnly these\n    this.name = name;\n    this.type = type;\n    this.localName = localName;\n    this.dynamic = dynamic;\n  }\n\n  _createClass(Coder, [{\n    key: \"_throwError\",\n    value: function _throwError(message, value) {\n      logger.throwArgumentError(message, this.localName, value);\n    }\n  }]);\n\n  return Coder;\n}();\nexport var Writer = /*#__PURE__*/function () {\n  function Writer(wordSize) {\n    _classCallCheck(this, Writer);\n\n    defineReadOnly(this, \"wordSize\", wordSize || 32);\n    this._data = [];\n    this._dataLength = 0;\n    this._padding = new Uint8Array(wordSize);\n  }\n\n  _createClass(Writer, [{\n    key: \"_writeData\",\n    value: function _writeData(data) {\n      this._data.push(data);\n\n      this._dataLength += data.length;\n      return data.length;\n    }\n  }, {\n    key: \"appendWriter\",\n    value: function appendWriter(writer) {\n      return this._writeData(concat(writer._data));\n    } // Arrayish items; padded on the right to wordSize\n\n  }, {\n    key: \"writeBytes\",\n    value: function writeBytes(value) {\n      var bytes = arrayify(value);\n      var paddingOffset = bytes.length % this.wordSize;\n\n      if (paddingOffset) {\n        bytes = concat([bytes, this._padding.slice(paddingOffset)]);\n      }\n\n      return this._writeData(bytes);\n    }\n  }, {\n    key: \"_getValue\",\n    value: function _getValue(value) {\n      var bytes = arrayify(BigNumber.from(value));\n\n      if (bytes.length > this.wordSize) {\n        logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n          length: this.wordSize,\n          offset: bytes.length\n        });\n      }\n\n      if (bytes.length % this.wordSize) {\n        bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\n      }\n\n      return bytes;\n    } // BigNumberish items; padded on the left to wordSize\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      return this._writeData(this._getValue(value));\n    }\n  }, {\n    key: \"writeUpdatableValue\",\n    value: function writeUpdatableValue() {\n      var _this = this;\n\n      var offset = this._data.length;\n\n      this._data.push(this._padding);\n\n      this._dataLength += this.wordSize;\n      return function (value) {\n        _this._data[offset] = _this._getValue(value);\n      };\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return hexConcat(this._data);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._dataLength;\n    }\n  }]);\n\n  return Writer;\n}();\nexport var Reader = /*#__PURE__*/function () {\n  function Reader(data, wordSize, coerceFunc, allowLoose) {\n    _classCallCheck(this, Reader);\n\n    defineReadOnly(this, \"_data\", arrayify(data));\n    defineReadOnly(this, \"wordSize\", wordSize || 32);\n    defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n    defineReadOnly(this, \"allowLoose\", allowLoose);\n    this._offset = 0;\n  }\n\n  _createClass(Reader, [{\n    key: \"coerce\",\n    value: function coerce(name, value) {\n      if (this._coerceFunc) {\n        return this._coerceFunc(name, value);\n      }\n\n      return Reader.coerce(name, value);\n    }\n  }, {\n    key: \"_peekBytes\",\n    value: function _peekBytes(offset, length, loose) {\n      var alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n\n      if (this._offset + alignedLength > this._data.length) {\n        if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n          alignedLength = length;\n        } else {\n          logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n            length: this._data.length,\n            offset: this._offset + alignedLength\n          });\n        }\n      }\n\n      return this._data.slice(this._offset, this._offset + alignedLength);\n    }\n  }, {\n    key: \"subReader\",\n    value: function subReader(offset) {\n      return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    }\n  }, {\n    key: \"readBytes\",\n    value: function readBytes(length, loose) {\n      var bytes = this._peekBytes(0, length, !!loose);\n\n      this._offset += bytes.length; // @TODO: Make sure the length..end bytes are all 0?\n\n      return bytes.slice(0, length);\n    }\n  }, {\n    key: \"readValue\",\n    value: function readValue() {\n      return BigNumber.from(this.readBytes(this.wordSize));\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return hexlify(this._data);\n    }\n  }, {\n    key: \"consumed\",\n    get: function get() {\n      return this._offset;\n    } // The default Coerce function\n\n  }], [{\n    key: \"coerce\",\n    value: function coerce(name, value) {\n      var match = name.match(\"^u?int([0-9]+)$\");\n\n      if (match && parseInt(match[1]) <= 48) {\n        value = value.toNumber();\n      }\n\n      return value;\n    }\n  }]);\n\n  return Reader;\n}();","map":{"version":3,"sources":["../../src.ts/coders/abstract-coder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nimport { arrayify, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\r\nimport { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { defineReadOnly } from \"@ethersproject/properties\";\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"../_version\";\r\nconst logger = new Logger(version);\r\nexport function checkResultErrors(result) {\r\n    // Find the first error (if any)\r\n    const errors = [];\r\n    const checkErrors = function (path, object) {\r\n        if (!Array.isArray(object)) {\r\n            return;\r\n        }\r\n        for (let key in object) {\r\n            const childPath = path.slice();\r\n            childPath.push(key);\r\n            try {\r\n                checkErrors(childPath, object[key]);\r\n            }\r\n            catch (error) {\r\n                errors.push({ path: childPath, error: error });\r\n            }\r\n        }\r\n    };\r\n    checkErrors([], result);\r\n    return errors;\r\n}\r\nexport class Coder {\r\n    constructor(name, type, localName, dynamic) {\r\n        // @TODO: defineReadOnly these\r\n        this.name = name;\r\n        this.type = type;\r\n        this.localName = localName;\r\n        this.dynamic = dynamic;\r\n    }\r\n    _throwError(message, value) {\r\n        logger.throwArgumentError(message, this.localName, value);\r\n    }\r\n}\r\nexport class Writer {\r\n    constructor(wordSize) {\r\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\r\n        this._data = [];\r\n        this._dataLength = 0;\r\n        this._padding = new Uint8Array(wordSize);\r\n    }\r\n    get data() {\r\n        return hexConcat(this._data);\r\n    }\r\n    get length() { return this._dataLength; }\r\n    _writeData(data) {\r\n        this._data.push(data);\r\n        this._dataLength += data.length;\r\n        return data.length;\r\n    }\r\n    appendWriter(writer) {\r\n        return this._writeData(concat(writer._data));\r\n    }\r\n    // Arrayish items; padded on the right to wordSize\r\n    writeBytes(value) {\r\n        let bytes = arrayify(value);\r\n        const paddingOffset = bytes.length % this.wordSize;\r\n        if (paddingOffset) {\r\n            bytes = concat([bytes, this._padding.slice(paddingOffset)]);\r\n        }\r\n        return this._writeData(bytes);\r\n    }\r\n    _getValue(value) {\r\n        let bytes = arrayify(BigNumber.from(value));\r\n        if (bytes.length > this.wordSize) {\r\n            logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\r\n                length: this.wordSize,\r\n                offset: bytes.length\r\n            });\r\n        }\r\n        if (bytes.length % this.wordSize) {\r\n            bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\r\n        }\r\n        return bytes;\r\n    }\r\n    // BigNumberish items; padded on the left to wordSize\r\n    writeValue(value) {\r\n        return this._writeData(this._getValue(value));\r\n    }\r\n    writeUpdatableValue() {\r\n        const offset = this._data.length;\r\n        this._data.push(this._padding);\r\n        this._dataLength += this.wordSize;\r\n        return (value) => {\r\n            this._data[offset] = this._getValue(value);\r\n        };\r\n    }\r\n}\r\nexport class Reader {\r\n    constructor(data, wordSize, coerceFunc, allowLoose) {\r\n        defineReadOnly(this, \"_data\", arrayify(data));\r\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\r\n        defineReadOnly(this, \"_coerceFunc\", coerceFunc);\r\n        defineReadOnly(this, \"allowLoose\", allowLoose);\r\n        this._offset = 0;\r\n    }\r\n    get data() { return hexlify(this._data); }\r\n    get consumed() { return this._offset; }\r\n    // The default Coerce function\r\n    static coerce(name, value) {\r\n        let match = name.match(\"^u?int([0-9]+)$\");\r\n        if (match && parseInt(match[1]) <= 48) {\r\n            value = value.toNumber();\r\n        }\r\n        return value;\r\n    }\r\n    coerce(name, value) {\r\n        if (this._coerceFunc) {\r\n            return this._coerceFunc(name, value);\r\n        }\r\n        return Reader.coerce(name, value);\r\n    }\r\n    _peekBytes(offset, length, loose) {\r\n        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\r\n        if (this._offset + alignedLength > this._data.length) {\r\n            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\r\n                alignedLength = length;\r\n            }\r\n            else {\r\n                logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\r\n                    length: this._data.length,\r\n                    offset: this._offset + alignedLength\r\n                });\r\n            }\r\n        }\r\n        return this._data.slice(this._offset, this._offset + alignedLength);\r\n    }\r\n    subReader(offset) {\r\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\r\n    }\r\n    readBytes(length, loose) {\r\n        let bytes = this._peekBytes(0, length, !!loose);\r\n        this._offset += bytes.length;\r\n        // @TODO: Make sure the length..end bytes are all 0?\r\n        return bytes.slice(0, length);\r\n    }\r\n    readValue() {\r\n        return BigNumber.from(this.readBytes(this.wordSize));\r\n    }\r\n}\r\n//# sourceMappingURL=abstract-coder.js.map"]},"metadata":{},"sourceType":"module"}