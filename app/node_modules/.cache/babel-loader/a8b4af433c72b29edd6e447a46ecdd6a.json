{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nmodule.exports = function base64(alphabet) {\n  // The alphabet is only used to know:\n  //   1. If padding is enabled (must contain '=')\n  //   2. If the output must be url-safe (must contain '-' and '_')\n  //   3. If the input of the output function is valid\n  // The alphabets from RFC 4648 are always used.\n  const padding = alphabet.indexOf('=') > -1;\n  const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1;\n  return {\n    encode(input) {\n      let output = '';\n\n      if (typeof input === 'string') {\n        output = Buffer.from(input).toString('base64');\n      } else {\n        output = input.toString('base64');\n      }\n\n      if (url) {\n        output = output.replace(/\\+/g, '-').replace(/\\//g, '_');\n      }\n\n      const pad = output.indexOf('=');\n\n      if (pad > 0 && !padding) {\n        output = output.substring(0, pad);\n      }\n\n      return output;\n    },\n\n    decode(input) {\n      for (const char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base64 character');\n        }\n      }\n\n      return Buffer.from(input, 'base64');\n    }\n\n  };\n};","map":{"version":3,"sources":["C:/ngmi/node_modules/multibase/src/base64.js"],"names":["Buffer","require","module","exports","base64","alphabet","padding","indexOf","url","encode","input","output","from","toString","replace","pad","substring","decode","char","Error"],"mappings":"AAAA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,MAAT,CAAiBC,QAAjB,EAA2B;AAC1C;AACA;AACA;AACA;AACA;AACA,QAAMC,OAAO,GAAGD,QAAQ,CAACE,OAAT,CAAiB,GAAjB,IAAwB,CAAC,CAAzC;AACA,QAAMC,GAAG,GAAGH,QAAQ,CAACE,OAAT,CAAiB,GAAjB,IAAwB,CAAC,CAAzB,IAA8BF,QAAQ,CAACE,OAAT,CAAiB,GAAjB,IAAwB,CAAC,CAAnE;AAEA,SAAO;AACLE,IAAAA,MAAM,CAAEC,KAAF,EAAS;AACb,UAAIC,MAAM,GAAG,EAAb;;AAEA,UAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7BC,QAAAA,MAAM,GAAGX,MAAM,CAACY,IAAP,CAAYF,KAAZ,EAAmBG,QAAnB,CAA4B,QAA5B,CAAT;AACD,OAFD,MAEO;AACLF,QAAAA,MAAM,GAAGD,KAAK,CAACG,QAAN,CAAe,QAAf,CAAT;AACD;;AAED,UAAIL,GAAJ,EAAS;AACPG,QAAAA,MAAM,GAAGA,MAAM,CAACG,OAAP,CAAe,KAAf,EAAsB,GAAtB,EAA2BA,OAA3B,CAAmC,KAAnC,EAA0C,GAA1C,CAAT;AACD;;AAED,YAAMC,GAAG,GAAGJ,MAAM,CAACJ,OAAP,CAAe,GAAf,CAAZ;;AACA,UAAIQ,GAAG,GAAG,CAAN,IAAW,CAACT,OAAhB,EAAyB;AACvBK,QAAAA,MAAM,GAAGA,MAAM,CAACK,SAAP,CAAiB,CAAjB,EAAoBD,GAApB,CAAT;AACD;;AAED,aAAOJ,MAAP;AACD,KApBI;;AAqBLM,IAAAA,MAAM,CAAEP,KAAF,EAAS;AACb,WAAK,MAAMQ,IAAX,IAAmBR,KAAnB,EAA0B;AACxB,YAAIL,QAAQ,CAACE,OAAT,CAAiBW,IAAjB,IAAyB,CAA7B,EAAgC;AAC9B,gBAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;AACF;;AAED,aAAOnB,MAAM,CAACY,IAAP,CAAYF,KAAZ,EAAmB,QAAnB,CAAP;AACD;;AA7BI,GAAP;AA+BD,CAxCD","sourcesContent":["'use strict'\r\nconst { Buffer } = require('buffer')\r\n\r\nmodule.exports = function base64 (alphabet) {\r\n  // The alphabet is only used to know:\r\n  //   1. If padding is enabled (must contain '=')\r\n  //   2. If the output must be url-safe (must contain '-' and '_')\r\n  //   3. If the input of the output function is valid\r\n  // The alphabets from RFC 4648 are always used.\r\n  const padding = alphabet.indexOf('=') > -1\r\n  const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1\r\n\r\n  return {\r\n    encode (input) {\r\n      let output = ''\r\n\r\n      if (typeof input === 'string') {\r\n        output = Buffer.from(input).toString('base64')\r\n      } else {\r\n        output = input.toString('base64')\r\n      }\r\n\r\n      if (url) {\r\n        output = output.replace(/\\+/g, '-').replace(/\\//g, '_')\r\n      }\r\n\r\n      const pad = output.indexOf('=')\r\n      if (pad > 0 && !padding) {\r\n        output = output.substring(0, pad)\r\n      }\r\n\r\n      return output\r\n    },\r\n    decode (input) {\r\n      for (const char of input) {\r\n        if (alphabet.indexOf(char) < 0) {\r\n          throw new Error('invalid base64 character')\r\n        }\r\n      }\r\n\r\n      return Buffer.from(input, 'base64')\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}