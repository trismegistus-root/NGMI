{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.stripZeros = exports.unpad = exports.setLengthRight = exports.setLength = exports.setLengthLeft = exports.zeros = void 0;\n\nvar ethjsUtil = require('ethjs-util');\n\nvar BN = require(\"bn.js\");\n/**\r\n * Returns a buffer filled with 0s.\r\n * @param bytes the number of bytes the buffer should be\r\n */\n\n\nexports.zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\n/**\r\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\r\n * Or it truncates the beginning if it exceeds.\r\n * @param msg the value to pad (Buffer|Array)\r\n * @param length the number of bytes the output should be\r\n * @param right whether to start padding form the left or right\r\n * @return (Buffer|Array)\r\n */\n\n\nexports.setLengthLeft = function (msg, length, right) {\n  if (right === void 0) {\n    right = false;\n  }\n\n  var buf = exports.zeros(length);\n  msg = exports.toBuffer(msg);\n\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n\n    return msg.slice(-length);\n  }\n};\n\nexports.setLength = exports.setLengthLeft;\n/**\r\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\r\n * Or it truncates the beginning if it exceeds.\r\n * @param msg the value to pad (Buffer|Array)\r\n * @param length the number of bytes the output should be\r\n * @return (Buffer|Array)\r\n */\n\nexports.setLengthRight = function (msg, length) {\n  return exports.setLength(msg, length, true);\n};\n/**\r\n * Trims leading zeros from a `Buffer` or an `Array`.\r\n * @param a (Buffer|Array|String)\r\n * @return (Buffer|Array|String)\r\n */\n\n\nexports.unpad = function (a) {\n  a = ethjsUtil.stripHexPrefix(a);\n  var first = a[0];\n\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n\n  return a;\n};\n\nexports.stripZeros = exports.unpad;\n/**\r\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\r\n * @param v the value\r\n */\n\nexports.toBuffer = function (v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = Buffer.from(v);\n    } else if (typeof v === 'string') {\n      if (ethjsUtil.isHexString(v)) {\n        v = Buffer.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)), 'hex');\n      } else {\n        throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \" + v);\n      }\n    } else if (typeof v === 'number') {\n      v = ethjsUtil.intToBuffer(v);\n    } else if (v === null || v === undefined) {\n      v = Buffer.allocUnsafe(0);\n    } else if (BN.isBN(v)) {\n      v = v.toArrayLike(Buffer);\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = Buffer.from(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n\n  return v;\n};\n/**\r\n * Converts a `Buffer` to a `Number`.\r\n * @param buf `Buffer` object to convert\r\n * @throws If the input number exceeds 53 bits.\r\n */\n\n\nexports.bufferToInt = function (buf) {\n  return new BN(exports.toBuffer(buf)).toNumber();\n};\n/**\r\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\r\n * @param buf `Buffer` object to convert\r\n */\n\n\nexports.bufferToHex = function (buf) {\n  buf = exports.toBuffer(buf);\n  return '0x' + buf.toString('hex');\n};\n/**\r\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\r\n * @param num Signed integer value\r\n */\n\n\nexports.fromSigned = function (num) {\n  return new BN(num).fromTwos(256);\n};\n/**\r\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\r\n * @param num\r\n */\n\n\nexports.toUnsigned = function (num) {\n  return Buffer.from(num.toTwos(256).toArray());\n};\n/**\r\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\r\n */\n\n\nexports.addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return ethjsUtil.isHexPrefixed(str) ? str : '0x' + str;\n};\n/**\r\n * Converts a `Buffer` or `Array` to JSON.\r\n * @param ba (Buffer|Array)\r\n * @return (Array|String|null)\r\n */\n\n\nexports.baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return \"0x\" + ba.toString('hex');\n  } else if (ba instanceof Array) {\n    var array = [];\n\n    for (var i = 0; i < ba.length; i++) {\n      array.push(exports.baToJSON(ba[i]));\n    }\n\n    return array;\n  }\n};","map":{"version":3,"sources":["../src/bytes.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.stripZeros = exports.unpad = exports.setLengthRight = exports.setLength = exports.setLengthLeft = exports.zeros = void 0;\r\nvar ethjsUtil = require('ethjs-util');\r\nvar BN = require(\"bn.js\");\r\n/**\r\n * Returns a buffer filled with 0s.\r\n * @param bytes the number of bytes the buffer should be\r\n */\r\nexports.zeros = function (bytes) {\r\n    return Buffer.allocUnsafe(bytes).fill(0);\r\n};\r\n/**\r\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\r\n * Or it truncates the beginning if it exceeds.\r\n * @param msg the value to pad (Buffer|Array)\r\n * @param length the number of bytes the output should be\r\n * @param right whether to start padding form the left or right\r\n * @return (Buffer|Array)\r\n */\r\nexports.setLengthLeft = function (msg, length, right) {\r\n    if (right === void 0) { right = false; }\r\n    var buf = exports.zeros(length);\r\n    msg = exports.toBuffer(msg);\r\n    if (right) {\r\n        if (msg.length < length) {\r\n            msg.copy(buf);\r\n            return buf;\r\n        }\r\n        return msg.slice(0, length);\r\n    }\r\n    else {\r\n        if (msg.length < length) {\r\n            msg.copy(buf, length - msg.length);\r\n            return buf;\r\n        }\r\n        return msg.slice(-length);\r\n    }\r\n};\r\nexports.setLength = exports.setLengthLeft;\r\n/**\r\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\r\n * Or it truncates the beginning if it exceeds.\r\n * @param msg the value to pad (Buffer|Array)\r\n * @param length the number of bytes the output should be\r\n * @return (Buffer|Array)\r\n */\r\nexports.setLengthRight = function (msg, length) {\r\n    return exports.setLength(msg, length, true);\r\n};\r\n/**\r\n * Trims leading zeros from a `Buffer` or an `Array`.\r\n * @param a (Buffer|Array|String)\r\n * @return (Buffer|Array|String)\r\n */\r\nexports.unpad = function (a) {\r\n    a = ethjsUtil.stripHexPrefix(a);\r\n    var first = a[0];\r\n    while (a.length > 0 && first.toString() === '0') {\r\n        a = a.slice(1);\r\n        first = a[0];\r\n    }\r\n    return a;\r\n};\r\nexports.stripZeros = exports.unpad;\r\n/**\r\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\r\n * @param v the value\r\n */\r\nexports.toBuffer = function (v) {\r\n    if (!Buffer.isBuffer(v)) {\r\n        if (Array.isArray(v)) {\r\n            v = Buffer.from(v);\r\n        }\r\n        else if (typeof v === 'string') {\r\n            if (ethjsUtil.isHexString(v)) {\r\n                v = Buffer.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)), 'hex');\r\n            }\r\n            else {\r\n                throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \" + v);\r\n            }\r\n        }\r\n        else if (typeof v === 'number') {\r\n            v = ethjsUtil.intToBuffer(v);\r\n        }\r\n        else if (v === null || v === undefined) {\r\n            v = Buffer.allocUnsafe(0);\r\n        }\r\n        else if (BN.isBN(v)) {\r\n            v = v.toArrayLike(Buffer);\r\n        }\r\n        else if (v.toArray) {\r\n            // converts a BN to a Buffer\r\n            v = Buffer.from(v.toArray());\r\n        }\r\n        else {\r\n            throw new Error('invalid type');\r\n        }\r\n    }\r\n    return v;\r\n};\r\n/**\r\n * Converts a `Buffer` to a `Number`.\r\n * @param buf `Buffer` object to convert\r\n * @throws If the input number exceeds 53 bits.\r\n */\r\nexports.bufferToInt = function (buf) {\r\n    return new BN(exports.toBuffer(buf)).toNumber();\r\n};\r\n/**\r\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\r\n * @param buf `Buffer` object to convert\r\n */\r\nexports.bufferToHex = function (buf) {\r\n    buf = exports.toBuffer(buf);\r\n    return '0x' + buf.toString('hex');\r\n};\r\n/**\r\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\r\n * @param num Signed integer value\r\n */\r\nexports.fromSigned = function (num) {\r\n    return new BN(num).fromTwos(256);\r\n};\r\n/**\r\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\r\n * @param num\r\n */\r\nexports.toUnsigned = function (num) {\r\n    return Buffer.from(num.toTwos(256).toArray());\r\n};\r\n/**\r\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\r\n */\r\nexports.addHexPrefix = function (str) {\r\n    if (typeof str !== 'string') {\r\n        return str;\r\n    }\r\n    return ethjsUtil.isHexPrefixed(str) ? str : '0x' + str;\r\n};\r\n/**\r\n * Converts a `Buffer` or `Array` to JSON.\r\n * @param ba (Buffer|Array)\r\n * @return (Array|String|null)\r\n */\r\nexports.baToJSON = function (ba) {\r\n    if (Buffer.isBuffer(ba)) {\r\n        return \"0x\" + ba.toString('hex');\r\n    }\r\n    else if (ba instanceof Array) {\r\n        var array = [];\r\n        for (var i = 0; i < ba.length; i++) {\r\n            array.push(exports.baToJSON(ba[i]));\r\n        }\r\n        return array;\r\n    }\r\n};\r\n//# sourceMappingURL=bytes.js.map"]},"metadata":{},"sourceType":"script"}