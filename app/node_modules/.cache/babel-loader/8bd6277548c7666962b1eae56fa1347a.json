{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:/ngmi/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/ngmi/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar _permanentCensorErrors = false;\nvar _censorErrors = false;\nvar LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nvar _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nvar _globalLogger = null;\n\nfunction _checkNormalize() {\n  try {\n    var missing = []; // Make sure all forms of normalization are supported\n\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(function (form) {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n\n  return null;\n}\n\nvar _normalizeError = _checkNormalize();\n\nexport var LogLevel;\n\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\n\nexport var ErrorCode;\n\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\"; // Not Implemented\n\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\"; // Unsupported Operation\n  //   - operation\n\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\"; // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\"; // Some sort of bad response from the server\n\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\"; // Timeout\n\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\"; ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\"; // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\"; ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\"; // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\"; // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\"; // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\"; ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\"; // Insufficien funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\"; // Nonce has already been used\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\"; // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\"; // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n})(ErrorCode || (ErrorCode = {}));\n\n;\nexport var Logger = /*#__PURE__*/function () {\n  function Logger(version) {\n    _classCallCheck(this, Logger);\n\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n\n  _createClass(Logger, [{\n    key: \"_log\",\n    value: function _log(logLevel, args) {\n      var level = logLevel.toLowerCase();\n\n      if (LogLevels[level] == null) {\n        this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n      }\n\n      if (_logLevel > LogLevels[level]) {\n        return;\n      }\n\n      console.log.apply(console, args);\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      this._log(Logger.levels.DEBUG, args);\n    }\n  }, {\n    key: \"info\",\n    value: function info() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      this._log(Logger.levels.INFO, args);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      this._log(Logger.levels.WARNING, args);\n    }\n  }, {\n    key: \"makeError\",\n    value: function makeError(message, code, params) {\n      // Errors are being censored\n      if (_censorErrors) {\n        return this.makeError(\"censored error\", code, {});\n      }\n\n      if (!code) {\n        code = Logger.errors.UNKNOWN_ERROR;\n      }\n\n      if (!params) {\n        params = {};\n      }\n\n      var messageDetails = [];\n      Object.keys(params).forEach(function (key) {\n        try {\n          messageDetails.push(key + \"=\" + JSON.stringify(params[key]));\n        } catch (error) {\n          messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n        }\n      });\n      messageDetails.push(\"code=\".concat(code));\n      messageDetails.push(\"version=\".concat(this.version));\n      var reason = message;\n\n      if (messageDetails.length) {\n        message += \" (\" + messageDetails.join(\", \") + \")\";\n      } // @TODO: Any??\n\n\n      var error = new Error(message);\n      error.reason = reason;\n      error.code = code;\n      Object.keys(params).forEach(function (key) {\n        error[key] = params[key];\n      });\n      return error;\n    }\n  }, {\n    key: \"throwError\",\n    value: function throwError(message, code, params) {\n      throw this.makeError(message, code, params);\n    }\n  }, {\n    key: \"throwArgumentError\",\n    value: function throwArgumentError(message, name, value) {\n      return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n        argument: name,\n        value: value\n      });\n    }\n  }, {\n    key: \"assert\",\n    value: function assert(condition, message, code, params) {\n      if (!!condition) {\n        return;\n      }\n\n      this.throwError(message, code, params);\n    }\n  }, {\n    key: \"assertArgument\",\n    value: function assertArgument(condition, message, name, value) {\n      if (!!condition) {\n        return;\n      }\n\n      this.throwArgumentError(message, name, value);\n    }\n  }, {\n    key: \"checkNormalize\",\n    value: function checkNormalize(message) {\n      if (message == null) {\n        message = \"platform missing String.prototype.normalize\";\n      }\n\n      if (_normalizeError) {\n        this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"String.prototype.normalize\",\n          form: _normalizeError\n        });\n      }\n    }\n  }, {\n    key: \"checkSafeUint53\",\n    value: function checkSafeUint53(value, message) {\n      if (typeof value !== \"number\") {\n        return;\n      }\n\n      if (message == null) {\n        message = \"value not safe\";\n      }\n\n      if (value < 0 || value >= 0x1fffffffffffff) {\n        this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n          operation: \"checkSafeInteger\",\n          fault: \"out-of-safe-range\",\n          value: value\n        });\n      }\n\n      if (value % 1) {\n        this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n          operation: \"checkSafeInteger\",\n          fault: \"non-integer\",\n          value: value\n        });\n      }\n    }\n  }, {\n    key: \"checkArgumentCount\",\n    value: function checkArgumentCount(count, expectedCount, message) {\n      if (message) {\n        message = \": \" + message;\n      } else {\n        message = \"\";\n      }\n\n      if (count < expectedCount) {\n        this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n          count: count,\n          expectedCount: expectedCount\n        });\n      }\n\n      if (count > expectedCount) {\n        this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n          count: count,\n          expectedCount: expectedCount\n        });\n      }\n    }\n  }, {\n    key: \"checkNew\",\n    value: function checkNew(target, kind) {\n      if (target === Object || target == null) {\n        this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n          name: kind.name\n        });\n      }\n    }\n  }, {\n    key: \"checkAbstract\",\n    value: function checkAbstract(target, kind) {\n      if (target === kind) {\n        this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n          name: target.name,\n          operation: \"new\"\n        });\n      } else if (target === Object || target == null) {\n        this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n          name: kind.name\n        });\n      }\n    }\n  }], [{\n    key: \"globalLogger\",\n    value: function globalLogger() {\n      if (!_globalLogger) {\n        _globalLogger = new Logger(version);\n      }\n\n      return _globalLogger;\n    }\n  }, {\n    key: \"setCensorship\",\n    value: function setCensorship(censorship, permanent) {\n      if (!censorship && permanent) {\n        this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"setCensorship\"\n        });\n      }\n\n      if (_permanentCensorErrors) {\n        if (!censorship) {\n          return;\n        }\n\n        this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"setCensorship\"\n        });\n      }\n\n      _censorErrors = !!censorship;\n      _permanentCensorErrors = !!permanent;\n    }\n  }, {\n    key: \"setLogLevel\",\n    value: function setLogLevel(logLevel) {\n      var level = LogLevels[logLevel.toLowerCase()];\n\n      if (level == null) {\n        Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n        return;\n      }\n\n      _logLevel = level;\n    }\n  }, {\n    key: \"from\",\n    value: function from(version) {\n      return new Logger(version);\n    }\n  }]);\n\n  return Logger;\n}();\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nlet _permanentCensorErrors = false;\r\nlet _censorErrors = false;\r\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\r\nlet _logLevel = LogLevels[\"default\"];\r\nimport { version } from \"./_version\";\r\nlet _globalLogger = null;\r\nfunction _checkNormalize() {\r\n    try {\r\n        const missing = [];\r\n        // Make sure all forms of normalization are supported\r\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\r\n            try {\r\n                if (\"test\".normalize(form) !== \"test\") {\r\n                    throw new Error(\"bad normalize\");\r\n                }\r\n                ;\r\n            }\r\n            catch (error) {\r\n                missing.push(form);\r\n            }\r\n        });\r\n        if (missing.length) {\r\n            throw new Error(\"missing \" + missing.join(\", \"));\r\n        }\r\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\r\n            throw new Error(\"broken implementation\");\r\n        }\r\n    }\r\n    catch (error) {\r\n        return error.message;\r\n    }\r\n    return null;\r\n}\r\nconst _normalizeError = _checkNormalize();\r\nexport var LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\r\n    LogLevel[\"INFO\"] = \"INFO\";\r\n    LogLevel[\"WARNING\"] = \"WARNING\";\r\n    LogLevel[\"ERROR\"] = \"ERROR\";\r\n    LogLevel[\"OFF\"] = \"OFF\";\r\n})(LogLevel || (LogLevel = {}));\r\nexport var ErrorCode;\r\n(function (ErrorCode) {\r\n    ///////////////////\r\n    // Generic Errors\r\n    // Unknown Error\r\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\r\n    // Not Implemented\r\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\r\n    // Unsupported Operation\r\n    //   - operation\r\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\r\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\r\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\r\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\r\n    // Some sort of bad response from the server\r\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\r\n    // Timeout\r\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\r\n    ///////////////////\r\n    // Operational  Errors\r\n    // Buffer Overrun\r\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\r\n    // Numeric Fault\r\n    //   - operation: the operation being executed\r\n    //   - fault: the reason this faulted\r\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\r\n    ///////////////////\r\n    // Argument Errors\r\n    // Missing new operator to an object\r\n    //  - name: The name of the class\r\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\r\n    // Invalid argument (e.g. value is incompatible with type) to a function:\r\n    //   - argument: The argument name that was invalid\r\n    //   - value: The value of the argument\r\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\r\n    // Missing argument to a function:\r\n    //   - count: The number of arguments received\r\n    //   - expectedCount: The number of arguments expected\r\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\r\n    // Too many arguments\r\n    //   - count: The number of arguments received\r\n    //   - expectedCount: The number of arguments expected\r\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\r\n    ///////////////////\r\n    // Blockchain Errors\r\n    // Call exception\r\n    //  - transaction: the transaction\r\n    //  - address?: the contract address\r\n    //  - args?: The arguments passed into the function\r\n    //  - method?: The Solidity method signature\r\n    //  - errorSignature?: The EIP848 error signature\r\n    //  - errorArgs?: The EIP848 error parameters\r\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\r\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\r\n    // Insufficien funds (< value + gasLimit * gasPrice)\r\n    //   - transaction: the transaction attempted\r\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\r\n    // Nonce has already been used\r\n    //   - transaction: the transaction attempted\r\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\r\n    // The replacement fee for the transaction is too low\r\n    //   - transaction: the transaction attempted\r\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\r\n    // The gas limit could not be estimated\r\n    //   - transaction: the transaction passed to estimateGas\r\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\r\n})(ErrorCode || (ErrorCode = {}));\r\n;\r\nexport class Logger {\r\n    constructor(version) {\r\n        Object.defineProperty(this, \"version\", {\r\n            enumerable: true,\r\n            value: version,\r\n            writable: false\r\n        });\r\n    }\r\n    _log(logLevel, args) {\r\n        const level = logLevel.toLowerCase();\r\n        if (LogLevels[level] == null) {\r\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\r\n        }\r\n        if (_logLevel > LogLevels[level]) {\r\n            return;\r\n        }\r\n        console.log.apply(console, args);\r\n    }\r\n    debug(...args) {\r\n        this._log(Logger.levels.DEBUG, args);\r\n    }\r\n    info(...args) {\r\n        this._log(Logger.levels.INFO, args);\r\n    }\r\n    warn(...args) {\r\n        this._log(Logger.levels.WARNING, args);\r\n    }\r\n    makeError(message, code, params) {\r\n        // Errors are being censored\r\n        if (_censorErrors) {\r\n            return this.makeError(\"censored error\", code, {});\r\n        }\r\n        if (!code) {\r\n            code = Logger.errors.UNKNOWN_ERROR;\r\n        }\r\n        if (!params) {\r\n            params = {};\r\n        }\r\n        const messageDetails = [];\r\n        Object.keys(params).forEach((key) => {\r\n            try {\r\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key]));\r\n            }\r\n            catch (error) {\r\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\r\n            }\r\n        });\r\n        messageDetails.push(`code=${code}`);\r\n        messageDetails.push(`version=${this.version}`);\r\n        const reason = message;\r\n        if (messageDetails.length) {\r\n            message += \" (\" + messageDetails.join(\", \") + \")\";\r\n        }\r\n        // @TODO: Any??\r\n        const error = new Error(message);\r\n        error.reason = reason;\r\n        error.code = code;\r\n        Object.keys(params).forEach(function (key) {\r\n            error[key] = params[key];\r\n        });\r\n        return error;\r\n    }\r\n    throwError(message, code, params) {\r\n        throw this.makeError(message, code, params);\r\n    }\r\n    throwArgumentError(message, name, value) {\r\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\r\n            argument: name,\r\n            value: value\r\n        });\r\n    }\r\n    assert(condition, message, code, params) {\r\n        if (!!condition) {\r\n            return;\r\n        }\r\n        this.throwError(message, code, params);\r\n    }\r\n    assertArgument(condition, message, name, value) {\r\n        if (!!condition) {\r\n            return;\r\n        }\r\n        this.throwArgumentError(message, name, value);\r\n    }\r\n    checkNormalize(message) {\r\n        if (message == null) {\r\n            message = \"platform missing String.prototype.normalize\";\r\n        }\r\n        if (_normalizeError) {\r\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                operation: \"String.prototype.normalize\", form: _normalizeError\r\n            });\r\n        }\r\n    }\r\n    checkSafeUint53(value, message) {\r\n        if (typeof (value) !== \"number\") {\r\n            return;\r\n        }\r\n        if (message == null) {\r\n            message = \"value not safe\";\r\n        }\r\n        if (value < 0 || value >= 0x1fffffffffffff) {\r\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\r\n                operation: \"checkSafeInteger\",\r\n                fault: \"out-of-safe-range\",\r\n                value: value\r\n            });\r\n        }\r\n        if (value % 1) {\r\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\r\n                operation: \"checkSafeInteger\",\r\n                fault: \"non-integer\",\r\n                value: value\r\n            });\r\n        }\r\n    }\r\n    checkArgumentCount(count, expectedCount, message) {\r\n        if (message) {\r\n            message = \": \" + message;\r\n        }\r\n        else {\r\n            message = \"\";\r\n        }\r\n        if (count < expectedCount) {\r\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\r\n                count: count,\r\n                expectedCount: expectedCount\r\n            });\r\n        }\r\n        if (count > expectedCount) {\r\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\r\n                count: count,\r\n                expectedCount: expectedCount\r\n            });\r\n        }\r\n    }\r\n    checkNew(target, kind) {\r\n        if (target === Object || target == null) {\r\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\r\n        }\r\n    }\r\n    checkAbstract(target, kind) {\r\n        if (target === kind) {\r\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\r\n        }\r\n        else if (target === Object || target == null) {\r\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\r\n        }\r\n    }\r\n    static globalLogger() {\r\n        if (!_globalLogger) {\r\n            _globalLogger = new Logger(version);\r\n        }\r\n        return _globalLogger;\r\n    }\r\n    static setCensorship(censorship, permanent) {\r\n        if (!censorship && permanent) {\r\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                operation: \"setCensorship\"\r\n            });\r\n        }\r\n        if (_permanentCensorErrors) {\r\n            if (!censorship) {\r\n                return;\r\n            }\r\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                operation: \"setCensorship\"\r\n            });\r\n        }\r\n        _censorErrors = !!censorship;\r\n        _permanentCensorErrors = !!permanent;\r\n    }\r\n    static setLogLevel(logLevel) {\r\n        const level = LogLevels[logLevel.toLowerCase()];\r\n        if (level == null) {\r\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\r\n            return;\r\n        }\r\n        _logLevel = level;\r\n    }\r\n    static from(version) {\r\n        return new Logger(version);\r\n    }\r\n}\r\nLogger.errors = ErrorCode;\r\nLogger.levels = LogLevel;\r\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}